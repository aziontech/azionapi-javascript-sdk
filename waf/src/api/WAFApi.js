/**
 * Web Application Firewall API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import WAFDomains200 from '../model/WAFDomains200';
import WAFEvents200 from '../model/WAFEvents200';
import WAFEvents400 from '../model/WAFEvents400';
import WAFEvents401 from '../model/WAFEvents401';
import WAFEvents404 from '../model/WAFEvents404';

/**
* WAF service.
* @module api/WAFApi
* @version 2.0.0
*/
export default class WAFApi {

    /**
    * Constructs a new WAFApi. 
    * @alias module:api/WAFApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getWAFDomains operation.
     * @callback module:api/WAFApi~getWAFDomainsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WAFDomains200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find domains attached to a WAF
     * @param {Number} wafId ID of WAF to return
     * @param {Object} opts Optional parameters
     * @param {String} [name] searches WAF for name
     * @param {module:api/WAFApi~getWAFDomainsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WAFDomains200}
     */
    getWAFDomains(wafId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'wafId' is set
      if (wafId === undefined || wafId === null) {
        throw new Error("Missing the required parameter 'wafId' when calling getWAFDomains");
      }

      let pathParams = {
        'wafId': wafId
      };
      let queryParams = {
        'name': opts['name']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json; version=3'];
      let returnType = WAFDomains200;
      return this.apiClient.callApi(
        '/waf/{wafId}/domains', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getWAFEvents operation.
     * @callback module:api/WAFApi~getWAFEventsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WAFEvents200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find WAF log events
     * @param {Number} wafId ID of WAF to return
     * @param {Number} hourRange Last log hours since now (it must be a integer number ranging between 1 and 72)
     * @param {String} domainsIds Multiple domain's id (they must be separated by comma like 1233,1234)
     * @param {Object} opts Optional parameters
     * @param {Number} [networkListId] Id of a network list
     * @param {module:api/WAFApi~getWAFEventsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WAFEvents200}
     */
    getWAFEvents(wafId, hourRange, domainsIds, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'wafId' is set
      if (wafId === undefined || wafId === null) {
        throw new Error("Missing the required parameter 'wafId' when calling getWAFEvents");
      }
      // verify the required parameter 'hourRange' is set
      if (hourRange === undefined || hourRange === null) {
        throw new Error("Missing the required parameter 'hourRange' when calling getWAFEvents");
      }
      // verify the required parameter 'domainsIds' is set
      if (domainsIds === undefined || domainsIds === null) {
        throw new Error("Missing the required parameter 'domainsIds' when calling getWAFEvents");
      }

      let pathParams = {
        'wafId': wafId
      };
      let queryParams = {
        'hour_range': hourRange,
        'network_list_id': opts['networkListId'],
        'domains_ids': domainsIds
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json; version=3'];
      let returnType = WAFEvents200;
      return this.apiClient.callApi(
        '/waf/{wafId}/waf_events', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
