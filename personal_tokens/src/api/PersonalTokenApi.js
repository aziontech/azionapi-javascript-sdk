/**
 * Personal Tokens - OpenAPI
 * The Personal Tokens API allows you to manage your existing personal tokens. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreatePersonalTokenRequest from '../model/CreatePersonalTokenRequest';
import CreatePersonalTokenResponse from '../model/CreatePersonalTokenResponse';
import PersonalTokenResponseGet from '../model/PersonalTokenResponseGet';
import PersonalTokenResponseWithResults from '../model/PersonalTokenResponseWithResults';

/**
* PersonalToken service.
* @module api/PersonalTokenApi
* @version 1.0.0
*/
export default class PersonalTokenApi {

    /**
    * Constructs a new PersonalTokenApi. 
    * @alias module:api/PersonalTokenApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createPersonalToken operation.
     * @callback module:api/PersonalTokenApi~createPersonalTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreatePersonalTokenResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new personal token
     * Create a new personal token
     * @param {module:model/CreatePersonalTokenRequest} createPersonalTokenRequest 
     * @param {module:api/PersonalTokenApi~createPersonalTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreatePersonalTokenResponse}
     */
    createPersonalToken(createPersonalTokenRequest, callback) {
      let postBody = createPersonalTokenRequest;
      // verify the required parameter 'createPersonalTokenRequest' is set
      if (createPersonalTokenRequest === undefined || createPersonalTokenRequest === null) {
        throw new Error("Missing the required parameter 'createPersonalTokenRequest' when calling createPersonalToken");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['tokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreatePersonalTokenResponse;
      return this.apiClient.callApi(
        '/iam/personal_tokens', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePersonalToken operation.
     * @callback module:api/PersonalTokenApi~deletePersonalTokenCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a personal token by id
     * Delete a personal token
     * @param {String} personalTokenId 
     * @param {module:api/PersonalTokenApi~deletePersonalTokenCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletePersonalToken(personalTokenId, callback) {
      let postBody = null;
      // verify the required parameter 'personalTokenId' is set
      if (personalTokenId === undefined || personalTokenId === null) {
        throw new Error("Missing the required parameter 'personalTokenId' when calling deletePersonalToken");
      }

      let pathParams = {
        'personalTokenId': personalTokenId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['tokenAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/iam/personal_tokens/{personalTokenId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPersonalToken operation.
     * @callback module:api/PersonalTokenApi~getPersonalTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PersonalTokenResponseGet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a personal token info
     * Get a personal token info
     * @param {String} personalTokenId 
     * @param {module:api/PersonalTokenApi~getPersonalTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PersonalTokenResponseGet}
     */
    getPersonalToken(personalTokenId, callback) {
      let postBody = null;
      // verify the required parameter 'personalTokenId' is set
      if (personalTokenId === undefined || personalTokenId === null) {
        throw new Error("Missing the required parameter 'personalTokenId' when calling getPersonalToken");
      }

      let pathParams = {
        'personalTokenId': personalTokenId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PersonalTokenResponseGet;
      return this.apiClient.callApi(
        '/iam/personal_tokens/{personalTokenId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listPersonalToken operation.
     * @callback module:api/PersonalTokenApi~listPersonalTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PersonalTokenResponseWithResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all existing personal token
     * List all existing personal token
     * @param {module:api/PersonalTokenApi~listPersonalTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PersonalTokenResponseWithResults}
     */
    listPersonalToken(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PersonalTokenResponseWithResults;
      return this.apiClient.callApi(
        '/iam/personal_tokens', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
