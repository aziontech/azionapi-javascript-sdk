/**
 * Intelligent DNS
 * Azion Intelligent DNS API
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import DnsSec from './model/DnsSec';
import DnsSecDelegationSigner from './model/DnsSecDelegationSigner';
import DnsSecDelegationSignerDigestType from './model/DnsSecDelegationSignerDigestType';
import ErrorResponse from './model/ErrorResponse';
import ErrorsResponse from './model/ErrorsResponse';
import GetOrPatchDnsSecResponse from './model/GetOrPatchDnsSecResponse';
import GetRecordsResponse from './model/GetRecordsResponse';
import GetRecordsResponseResults from './model/GetRecordsResponseResults';
import GetZoneResponse from './model/GetZoneResponse';
import GetZonesResponse from './model/GetZonesResponse';
import GetZonesResponseLinks from './model/GetZonesResponseLinks';
import PostOrPutRecordResponse from './model/PostOrPutRecordResponse';
import PostOrPutZoneResponse from './model/PostOrPutZoneResponse';
import RecordGet from './model/RecordGet';
import RecordPostOrPut from './model/RecordPostOrPut';
import Zone from './model/Zone';
import DNSSECApi from './api/DNSSECApi';
import RecordsApi from './api/RecordsApi';
import ZonesApi from './api/ZonesApi';


/**
* Azion Intelligent DNS API.<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var IntelligentDns = require('index'); // See note below*.
* var xxxSvc = new IntelligentDns.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new IntelligentDns.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new IntelligentDns.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new IntelligentDns.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 3.0.0
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The DnsSec model constructor.
     * @property {module:model/DnsSec}
     */
    DnsSec,

    /**
     * The DnsSecDelegationSigner model constructor.
     * @property {module:model/DnsSecDelegationSigner}
     */
    DnsSecDelegationSigner,

    /**
     * The DnsSecDelegationSignerDigestType model constructor.
     * @property {module:model/DnsSecDelegationSignerDigestType}
     */
    DnsSecDelegationSignerDigestType,

    /**
     * The ErrorResponse model constructor.
     * @property {module:model/ErrorResponse}
     */
    ErrorResponse,

    /**
     * The ErrorsResponse model constructor.
     * @property {module:model/ErrorsResponse}
     */
    ErrorsResponse,

    /**
     * The GetOrPatchDnsSecResponse model constructor.
     * @property {module:model/GetOrPatchDnsSecResponse}
     */
    GetOrPatchDnsSecResponse,

    /**
     * The GetRecordsResponse model constructor.
     * @property {module:model/GetRecordsResponse}
     */
    GetRecordsResponse,

    /**
     * The GetRecordsResponseResults model constructor.
     * @property {module:model/GetRecordsResponseResults}
     */
    GetRecordsResponseResults,

    /**
     * The GetZoneResponse model constructor.
     * @property {module:model/GetZoneResponse}
     */
    GetZoneResponse,

    /**
     * The GetZonesResponse model constructor.
     * @property {module:model/GetZonesResponse}
     */
    GetZonesResponse,

    /**
     * The GetZonesResponseLinks model constructor.
     * @property {module:model/GetZonesResponseLinks}
     */
    GetZonesResponseLinks,

    /**
     * The PostOrPutRecordResponse model constructor.
     * @property {module:model/PostOrPutRecordResponse}
     */
    PostOrPutRecordResponse,

    /**
     * The PostOrPutZoneResponse model constructor.
     * @property {module:model/PostOrPutZoneResponse}
     */
    PostOrPutZoneResponse,

    /**
     * The RecordGet model constructor.
     * @property {module:model/RecordGet}
     */
    RecordGet,

    /**
     * The RecordPostOrPut model constructor.
     * @property {module:model/RecordPostOrPut}
     */
    RecordPostOrPut,

    /**
     * The Zone model constructor.
     * @property {module:model/Zone}
     */
    Zone,

    /**
    * The DNSSECApi service constructor.
    * @property {module:api/DNSSECApi}
    */
    DNSSECApi,

    /**
    * The RecordsApi service constructor.
    * @property {module:api/RecordsApi}
    */
    RecordsApi,

    /**
    * The ZonesApi service constructor.
    * @property {module:api/ZonesApi}
    */
    ZonesApi
};
