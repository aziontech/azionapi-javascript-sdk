/**
 * Intelligent DNS
 * Azion Intelligent DNS API
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DnsSecDelegationSigner from './DnsSecDelegationSigner';

/**
 * The DnsSec model module.
 * @module model/DnsSec
 * @version 3.0.0
 */
class DnsSec {
    /**
     * Constructs a new <code>DnsSec</code>.
     * @alias module:model/DnsSec
     */
    constructor() { 
        
        DnsSec.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DnsSec</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DnsSec} obj Optional instance to populate.
     * @return {module:model/DnsSec} The populated <code>DnsSec</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DnsSec();

            if (data.hasOwnProperty('is_enabled')) {
                obj['is_enabled'] = ApiClient.convertToType(data['is_enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('delegation_signer')) {
                obj['delegation_signer'] = DnsSecDelegationSigner.constructFromObject(data['delegation_signer']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DnsSec</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DnsSec</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // validate the optional field `delegation_signer`
        if (data['delegation_signer']) { // data not null
          DnsSecDelegationSigner.validateJSON(data['delegation_signer']);
        }

        return true;
    }


}



/**
 * @member {Boolean} is_enabled
 */
DnsSec.prototype['is_enabled'] = undefined;

/**
 * @member {module:model/DnsSec.StatusEnum} status
 */
DnsSec.prototype['status'] = undefined;

/**
 * @member {module:model/DnsSecDelegationSigner} delegation_signer
 */
DnsSec.prototype['delegation_signer'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
DnsSec['StatusEnum'] = {

    /**
     * value: "unconfigured"
     * @const
     */
    "unconfigured": "unconfigured",

    /**
     * value: "waiting"
     * @const
     */
    "waiting": "waiting",

    /**
     * value: "ready"
     * @const
     */
    "ready": "ready"
};



export default DnsSec;

