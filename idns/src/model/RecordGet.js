/**
 * Intelligent DNS API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The RecordGet model module.
 * @module model/RecordGet
 * @version 1.0.0
 */
class RecordGet {
    /**
     * Constructs a new <code>RecordGet</code>.
     * @alias module:model/RecordGet
     */
    constructor() { 
        
        RecordGet.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RecordGet</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RecordGet} obj Optional instance to populate.
     * @return {module:model/RecordGet} The populated <code>RecordGet</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RecordGet();

            if (data.hasOwnProperty('record_id')) {
                obj['record_id'] = ApiClient.convertToType(data['record_id'], 'Number');
            }
            if (data.hasOwnProperty('entry')) {
                obj['entry'] = ApiClient.convertToType(data['entry'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('answers_list')) {
                obj['answers_list'] = ApiClient.convertToType(data['answers_list'], ['String']);
            }
            if (data.hasOwnProperty('policy')) {
                obj['policy'] = ApiClient.convertToType(data['policy'], 'String');
            }
            if (data.hasOwnProperty('weight')) {
                obj['weight'] = ApiClient.convertToType(data['weight'], 'Number');
            }
            if (data.hasOwnProperty('record_type')) {
                obj['record_type'] = ApiClient.convertToType(data['record_type'], 'String');
            }
            if (data.hasOwnProperty('ttl')) {
                obj['ttl'] = ApiClient.convertToType(data['ttl'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RecordGet</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RecordGet</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['entry'] && !(typeof data['entry'] === 'string' || data['entry'] instanceof String)) {
            throw new Error("Expected the field `entry` to be a primitive type in the JSON string but got " + data['entry']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['answers_list'])) {
            throw new Error("Expected the field `answers_list` to be an array in the JSON data but got " + data['answers_list']);
        }
        // ensure the json data is a string
        if (data['policy'] && !(typeof data['policy'] === 'string' || data['policy'] instanceof String)) {
            throw new Error("Expected the field `policy` to be a primitive type in the JSON string but got " + data['policy']);
        }
        // ensure the json data is a string
        if (data['record_type'] && !(typeof data['record_type'] === 'string' || data['record_type'] instanceof String)) {
            throw new Error("Expected the field `record_type` to be a primitive type in the JSON string but got " + data['record_type']);
        }

        return true;
    }


}



/**
 * @member {Number} record_id
 */
RecordGet.prototype['record_id'] = undefined;

/**
 * @member {String} entry
 */
RecordGet.prototype['entry'] = undefined;

/**
 * @member {String} description
 */
RecordGet.prototype['description'] = undefined;

/**
 * @member {Array.<String>} answers_list
 */
RecordGet.prototype['answers_list'] = undefined;

/**
 * @member {String} policy
 */
RecordGet.prototype['policy'] = undefined;

/**
 * @member {Number} weight
 */
RecordGet.prototype['weight'] = undefined;

/**
 * @member {String} record_type
 */
RecordGet.prototype['record_type'] = undefined;

/**
 * @member {Number} ttl
 */
RecordGet.prototype['ttl'] = undefined;






export default RecordGet;

