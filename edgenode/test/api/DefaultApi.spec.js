/**
 * Edgenode API
 * Azion Orchestration
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.EdgenodeApi);
  }
}(this, function(expect, EdgenodeApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new EdgenodeApi.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('authorizeEdgeNode', function() {
      it('should call authorizeEdgeNode successfully', function(done) {
        //uncomment below and update the code to test authorizeEdgeNode
        //instance.authorizeEdgeNode(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createEdgeNodeSvcs', function() {
      it('should call createEdgeNodeSvcs successfully', function(done) {
        //uncomment below and update the code to test createEdgeNodeSvcs
        //instance.createEdgeNodeSvcs(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('delEdgeNode', function() {
      it('should call delEdgeNode successfully', function(done) {
        //uncomment below and update the code to test delEdgeNode
        //instance.delEdgeNode(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('delEdgeNodeSvc', function() {
      it('should call delEdgeNodeSvc successfully', function(done) {
        //uncomment below and update the code to test delEdgeNodeSvc
        //instance.delEdgeNodeSvc(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getEdgeNode', function() {
      it('should call getEdgeNode successfully', function(done) {
        //uncomment below and update the code to test getEdgeNode
        //instance.getEdgeNode(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getEdgeNodeGroups', function() {
      it('should call getEdgeNodeGroups successfully', function(done) {
        //uncomment below and update the code to test getEdgeNodeGroups
        //instance.getEdgeNodeGroups(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getEdgeNodeSvcDetail', function() {
      it('should call getEdgeNodeSvcDetail successfully', function(done) {
        //uncomment below and update the code to test getEdgeNodeSvcDetail
        //instance.getEdgeNodeSvcDetail(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getEdgeNodeSvcs', function() {
      it('should call getEdgeNodeSvcs successfully', function(done) {
        //uncomment below and update the code to test getEdgeNodeSvcs
        //instance.getEdgeNodeSvcs(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getEdgeNodes', function() {
      it('should call getEdgeNodes successfully', function(done) {
        //uncomment below and update the code to test getEdgeNodes
        //instance.getEdgeNodes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateEdgeNode', function() {
      it('should call updateEdgeNode successfully', function(done) {
        //uncomment below and update the code to test updateEdgeNode
        //instance.updateEdgeNode(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateEdgeNodeSvcDetail', function() {
      it('should call updateEdgeNodeSvcDetail successfully', function(done) {
        //uncomment below and update the code to test updateEdgeNodeSvcDetail
        //instance.updateEdgeNodeSvcDetail(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
