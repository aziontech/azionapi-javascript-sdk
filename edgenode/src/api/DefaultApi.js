/**
 * Edge Node API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AuthorizeEdgeNodesRequest from '../model/AuthorizeEdgeNodesRequest';
import AuthorizeEdgeNodesResponse from '../model/AuthorizeEdgeNodesResponse';
import EdgeNodeDetailResponse from '../model/EdgeNodeDetailResponse';
import EdgeNodeResponseWithTotal from '../model/EdgeNodeResponseWithTotal';
import NodeGroupResponse from '../model/NodeGroupResponse';
import ServiceBindDetailResponse from '../model/ServiceBindDetailResponse';
import ServiceBindRequest from '../model/ServiceBindRequest';
import ServiceResponseWithTotal from '../model/ServiceResponseWithTotal';
import UpdateEdgeNodeResponse from '../model/UpdateEdgeNodeResponse';
import UpdateServiceBindRequest from '../model/UpdateServiceBindRequest';

/**
* Default service.
* @module api/DefaultApi
* @version 1.0.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the authorizeEdgeNode operation.
     * @callback module:api/DefaultApi~authorizeEdgeNodeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuthorizeEdgeNodesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Authorize edge-node
     * @param {module:model/AuthorizeEdgeNodesRequest} authorizeEdgeNodesRequest 
     * @param {module:api/DefaultApi~authorizeEdgeNodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AuthorizeEdgeNodesResponse}
     */
    authorizeEdgeNode(authorizeEdgeNodesRequest, callback) {
      let postBody = authorizeEdgeNodesRequest;
      // verify the required parameter 'authorizeEdgeNodesRequest' is set
      if (authorizeEdgeNodesRequest === undefined || authorizeEdgeNodesRequest === null) {
        throw new Error("Missing the required parameter 'authorizeEdgeNodesRequest' when calling authorizeEdgeNode");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['tokenAuth'];
      let contentTypes = ['application/json; version=3'];
      let accepts = ['application/json; version=3'];
      let returnType = AuthorizeEdgeNodesResponse;
      return this.apiClient.callApi(
        '/edge_nodes/authorize', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createEdgeNodeSvcs operation.
     * @callback module:api/DefaultApi~createEdgeNodeSvcsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceBindDetailResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an edge-node Service association
     * @param {Number} edgenodeId 
     * @param {module:model/ServiceBindRequest} serviceBindRequest 
     * @param {module:api/DefaultApi~createEdgeNodeSvcsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServiceBindDetailResponse}
     */
    createEdgeNodeSvcs(edgenodeId, serviceBindRequest, callback) {
      let postBody = serviceBindRequest;
      // verify the required parameter 'edgenodeId' is set
      if (edgenodeId === undefined || edgenodeId === null) {
        throw new Error("Missing the required parameter 'edgenodeId' when calling createEdgeNodeSvcs");
      }
      // verify the required parameter 'serviceBindRequest' is set
      if (serviceBindRequest === undefined || serviceBindRequest === null) {
        throw new Error("Missing the required parameter 'serviceBindRequest' when calling createEdgeNodeSvcs");
      }

      let pathParams = {
        'edgenodeId': edgenodeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['tokenAuth'];
      let contentTypes = ['application/json; version=3'];
      let accepts = ['application/json; version=3'];
      let returnType = ServiceBindDetailResponse;
      return this.apiClient.callApi(
        '/edge_nodes/{edgenodeId}/services', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the delEdgeNode operation.
     * @callback module:api/DefaultApi~delEdgeNodeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete edge-node by ID
     * @param {Number} edgenodeId 
     * @param {module:api/DefaultApi~delEdgeNodeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    delEdgeNode(edgenodeId, callback) {
      let postBody = null;
      // verify the required parameter 'edgenodeId' is set
      if (edgenodeId === undefined || edgenodeId === null) {
        throw new Error("Missing the required parameter 'edgenodeId' when calling delEdgeNode");
      }

      let pathParams = {
        'edgenodeId': edgenodeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['tokenAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/edge_nodes/{edgenodeId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the delEdgeNodeSvc operation.
     * @callback module:api/DefaultApi~delEdgeNodeSvcCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an edge-node Service association
     * @param {Number} edgenodeId 
     * @param {Number} bindId 
     * @param {module:api/DefaultApi~delEdgeNodeSvcCallback} callback The callback function, accepting three arguments: error, data, response
     */
    delEdgeNodeSvc(edgenodeId, bindId, callback) {
      let postBody = null;
      // verify the required parameter 'edgenodeId' is set
      if (edgenodeId === undefined || edgenodeId === null) {
        throw new Error("Missing the required parameter 'edgenodeId' when calling delEdgeNodeSvc");
      }
      // verify the required parameter 'bindId' is set
      if (bindId === undefined || bindId === null) {
        throw new Error("Missing the required parameter 'bindId' when calling delEdgeNodeSvc");
      }

      let pathParams = {
        'edgenodeId': edgenodeId,
        'bindId': bindId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['tokenAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/edge_nodes/{edgenodeId}/services/{bindId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEdgeNode operation.
     * @callback module:api/DefaultApi~getEdgeNodeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EdgeNodeDetailResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return edge-node by ID
     * @param {Number} edgenodeId 
     * @param {module:api/DefaultApi~getEdgeNodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EdgeNodeDetailResponse}
     */
    getEdgeNode(edgenodeId, callback) {
      let postBody = null;
      // verify the required parameter 'edgenodeId' is set
      if (edgenodeId === undefined || edgenodeId === null) {
        throw new Error("Missing the required parameter 'edgenodeId' when calling getEdgeNode");
      }

      let pathParams = {
        'edgenodeId': edgenodeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json; version=3'];
      let returnType = EdgeNodeDetailResponse;
      return this.apiClient.callApi(
        '/edge_nodes/{edgenodeId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEdgeNodeGroups operation.
     * @callback module:api/DefaultApi~getEdgeNodeGroupsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/NodeGroupResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return edge-node groups
     * @param {module:api/DefaultApi~getEdgeNodeGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/NodeGroupResponse>}
     */
    getEdgeNodeGroups(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json; version=3'];
      let returnType = [NodeGroupResponse];
      return this.apiClient.callApi(
        '/edge_nodes/groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEdgeNodeSvcDetail operation.
     * @callback module:api/DefaultApi~getEdgeNodeSvcDetailCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceBindDetailResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return edge-node Service association by ID
     * @param {Number} edgenodeId 
     * @param {Number} bindId 
     * @param {module:api/DefaultApi~getEdgeNodeSvcDetailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServiceBindDetailResponse}
     */
    getEdgeNodeSvcDetail(edgenodeId, bindId, callback) {
      let postBody = null;
      // verify the required parameter 'edgenodeId' is set
      if (edgenodeId === undefined || edgenodeId === null) {
        throw new Error("Missing the required parameter 'edgenodeId' when calling getEdgeNodeSvcDetail");
      }
      // verify the required parameter 'bindId' is set
      if (bindId === undefined || bindId === null) {
        throw new Error("Missing the required parameter 'bindId' when calling getEdgeNodeSvcDetail");
      }

      let pathParams = {
        'edgenodeId': edgenodeId,
        'bindId': bindId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json; version=3'];
      let returnType = ServiceBindDetailResponse;
      return this.apiClient.callApi(
        '/edge_nodes/{edgenodeId}/services/{bindId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEdgeNodeSvcs operation.
     * @callback module:api/DefaultApi~getEdgeNodeSvcsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceResponseWithTotal} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return edge-node Services association
     * @param {Number} edgenodeId 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [isBound] 
     * @param {String} [filter] 
     * @param {String} [orderBy] 
     * @param {String} [sort] 
     * @param {Number} [page] 
     * @param {Number} [pageSize] 
     * @param {module:api/DefaultApi~getEdgeNodeSvcsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServiceResponseWithTotal}
     */
    getEdgeNodeSvcs(edgenodeId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'edgenodeId' is set
      if (edgenodeId === undefined || edgenodeId === null) {
        throw new Error("Missing the required parameter 'edgenodeId' when calling getEdgeNodeSvcs");
      }

      let pathParams = {
        'edgenodeId': edgenodeId
      };
      let queryParams = {
        'is_bound': opts['isBound'],
        'filter': opts['filter'],
        'order_by': opts['orderBy'],
        'sort': opts['sort'],
        'page': opts['page'],
        'page_size': opts['pageSize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json; version=3'];
      let returnType = ServiceResponseWithTotal;
      return this.apiClient.callApi(
        '/edge_nodes/{edgenodeId}/services', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEdgeNodes operation.
     * @callback module:api/DefaultApi~getEdgeNodesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EdgeNodeResponseWithTotal} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return edge-nodes
     * @param {Object} opts Optional parameters
     * @param {String} [filter] 
     * @param {String} [orderBy] 
     * @param {String} [sort] 
     * @param {Boolean} [onlyIds] 
     * @param {Number} [pageSize] 
     * @param {module:api/DefaultApi~getEdgeNodesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EdgeNodeResponseWithTotal}
     */
    getEdgeNodes(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'filter': opts['filter'],
        'order_by': opts['orderBy'],
        'sort': opts['sort'],
        'only_ids': opts['onlyIds'],
        'page_size': opts['pageSize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json; version=3'];
      let returnType = EdgeNodeResponseWithTotal;
      return this.apiClient.callApi(
        '/edge_nodes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateEdgeNode operation.
     * @callback module:api/DefaultApi~updateEdgeNodeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateEdgeNodeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update edge-node
     * @param {Number} edgenodeId 
     * @param {module:api/DefaultApi~updateEdgeNodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateEdgeNodeResponse}
     */
    updateEdgeNode(edgenodeId, callback) {
      let postBody = null;
      // verify the required parameter 'edgenodeId' is set
      if (edgenodeId === undefined || edgenodeId === null) {
        throw new Error("Missing the required parameter 'edgenodeId' when calling updateEdgeNode");
      }

      let pathParams = {
        'edgenodeId': edgenodeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json; version=3'];
      let returnType = UpdateEdgeNodeResponse;
      return this.apiClient.callApi(
        '/edge_nodes/{edgenodeId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateEdgeNodeSvcDetail operation.
     * @callback module:api/DefaultApi~updateEdgeNodeSvcDetailCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceBindDetailResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update edge-node Service association by ID
     * @param {Number} edgenodeId 
     * @param {Number} bindId 
     * @param {module:model/UpdateServiceBindRequest} updateServiceBindRequest 
     * @param {module:api/DefaultApi~updateEdgeNodeSvcDetailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServiceBindDetailResponse}
     */
    updateEdgeNodeSvcDetail(edgenodeId, bindId, updateServiceBindRequest, callback) {
      let postBody = updateServiceBindRequest;
      // verify the required parameter 'edgenodeId' is set
      if (edgenodeId === undefined || edgenodeId === null) {
        throw new Error("Missing the required parameter 'edgenodeId' when calling updateEdgeNodeSvcDetail");
      }
      // verify the required parameter 'bindId' is set
      if (bindId === undefined || bindId === null) {
        throw new Error("Missing the required parameter 'bindId' when calling updateEdgeNodeSvcDetail");
      }
      // verify the required parameter 'updateServiceBindRequest' is set
      if (updateServiceBindRequest === undefined || updateServiceBindRequest === null) {
        throw new Error("Missing the required parameter 'updateServiceBindRequest' when calling updateEdgeNodeSvcDetail");
      }

      let pathParams = {
        'edgenodeId': edgenodeId,
        'bindId': bindId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['tokenAuth'];
      let contentTypes = ['application/json; version=3'];
      let accepts = ['application/json; version=3'];
      let returnType = ServiceBindDetailResponse;
      return this.apiClient.callApi(
        '/edge_nodes/{edgenodeId}/services/{bindId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
