/**
 * Edge Function API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BadRequestResponse from '../model/BadRequestResponse';
import CreateEdgeFunctionRequest from '../model/CreateEdgeFunctionRequest';
import EdgeFunctionResponse from '../model/EdgeFunctionResponse';
import ErrorResponse from '../model/ErrorResponse';
import ListEdgeFunctionResponse from '../model/ListEdgeFunctionResponse';
import PatchEdgeFunctionRequest from '../model/PatchEdgeFunctionRequest';
import PutEdgeFunctionRequest from '../model/PutEdgeFunctionRequest';

/**
* EdgeFunctions service.
* @module api/EdgeFunctionsApi
* @version 2.0.0
*/
export default class EdgeFunctionsApi {

    /**
    * Constructs a new EdgeFunctionsApi. 
    * @alias module:api/EdgeFunctionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the edgeFunctionsGet operation.
     * @callback module:api/EdgeFunctionsApi~edgeFunctionsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListEdgeFunctionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * edge_functions
     * @param {Object} opts Optional parameters
     * @param {Number} [page] 
     * @param {Number} [pageSize] 
     * @param {String} [sort] 
     * @param {String} [orderBy] 
     * @param {module:api/EdgeFunctionsApi~edgeFunctionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListEdgeFunctionResponse}
     */
    edgeFunctionsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'page_size': opts['pageSize'],
        'sort': opts['sort'],
        'order_by': opts['orderBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json; version=3', 'application/json'];
      let returnType = ListEdgeFunctionResponse;
      return this.apiClient.callApi(
        '/edge_functions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the edgeFunctionsIdDelete operation.
     * @callback module:api/EdgeFunctionsApi~edgeFunctionsIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * edge_functions
     * @param {Number} id 
     * @param {module:api/EdgeFunctionsApi~edgeFunctionsIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    edgeFunctionsIdDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling edgeFunctionsIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/edge_functions/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the edgeFunctionsIdGet operation.
     * @callback module:api/EdgeFunctionsApi~edgeFunctionsIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EdgeFunctionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * edge_functions
     * @param {Number} id 
     * @param {module:api/EdgeFunctionsApi~edgeFunctionsIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EdgeFunctionResponse}
     */
    edgeFunctionsIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling edgeFunctionsIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EdgeFunctionResponse;
      return this.apiClient.callApi(
        '/edge_functions/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the edgeFunctionsIdPatch operation.
     * @callback module:api/EdgeFunctionsApi~edgeFunctionsIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EdgeFunctionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * edge_functions
     * @param {Number} id 
     * @param {module:model/PatchEdgeFunctionRequest} patchEdgeFunctionRequest 
     * @param {module:api/EdgeFunctionsApi~edgeFunctionsIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EdgeFunctionResponse}
     */
    edgeFunctionsIdPatch(id, patchEdgeFunctionRequest, callback) {
      let postBody = patchEdgeFunctionRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling edgeFunctionsIdPatch");
      }
      // verify the required parameter 'patchEdgeFunctionRequest' is set
      if (patchEdgeFunctionRequest === undefined || patchEdgeFunctionRequest === null) {
        throw new Error("Missing the required parameter 'patchEdgeFunctionRequest' when calling edgeFunctionsIdPatch");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['tokenAuth'];
      let contentTypes = ['application/json; version=3'];
      let accepts = ['application/json'];
      let returnType = EdgeFunctionResponse;
      return this.apiClient.callApi(
        '/edge_functions/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the edgeFunctionsIdPut operation.
     * @callback module:api/EdgeFunctionsApi~edgeFunctionsIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EdgeFunctionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * edge_functions
     * @param {Number} id 
     * @param {module:model/PutEdgeFunctionRequest} putEdgeFunctionRequest 
     * @param {module:api/EdgeFunctionsApi~edgeFunctionsIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EdgeFunctionResponse}
     */
    edgeFunctionsIdPut(id, putEdgeFunctionRequest, callback) {
      let postBody = putEdgeFunctionRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling edgeFunctionsIdPut");
      }
      // verify the required parameter 'putEdgeFunctionRequest' is set
      if (putEdgeFunctionRequest === undefined || putEdgeFunctionRequest === null) {
        throw new Error("Missing the required parameter 'putEdgeFunctionRequest' when calling edgeFunctionsIdPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['tokenAuth'];
      let contentTypes = ['application/json; version=3'];
      let accepts = ['application/json'];
      let returnType = EdgeFunctionResponse;
      return this.apiClient.callApi(
        '/edge_functions/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the edgeFunctionsPost operation.
     * @callback module:api/EdgeFunctionsApi~edgeFunctionsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EdgeFunctionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * edge_functions
     * @param {module:model/CreateEdgeFunctionRequest} createEdgeFunctionRequest 
     * @param {module:api/EdgeFunctionsApi~edgeFunctionsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EdgeFunctionResponse}
     */
    edgeFunctionsPost(createEdgeFunctionRequest, callback) {
      let postBody = createEdgeFunctionRequest;
      // verify the required parameter 'createEdgeFunctionRequest' is set
      if (createEdgeFunctionRequest === undefined || createEdgeFunctionRequest === null) {
        throw new Error("Missing the required parameter 'createEdgeFunctionRequest' when calling edgeFunctionsPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['tokenAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EdgeFunctionResponse;
      return this.apiClient.callApi(
        '/edge_functions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
