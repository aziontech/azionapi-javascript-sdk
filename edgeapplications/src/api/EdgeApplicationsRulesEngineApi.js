/**
 * Edge Application API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateRulesEngineRequest from '../model/CreateRulesEngineRequest';
import PatchRulesEngineRequest from '../model/PatchRulesEngineRequest';
import RulesEngineIdResponse from '../model/RulesEngineIdResponse';
import RulesEngineResponse from '../model/RulesEngineResponse';
import UpdateRulesEngineRequest from '../model/UpdateRulesEngineRequest';

/**
* EdgeApplicationsRulesEngine service.
* @module api/EdgeApplicationsRulesEngineApi
* @version 2.0.0
*/
export default class EdgeApplicationsRulesEngineApi {

    /**
    * Constructs a new EdgeApplicationsRulesEngineApi. 
    * @alias module:api/EdgeApplicationsRulesEngineApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the edgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesGet operation.
     * @callback module:api/EdgeApplicationsRulesEngineApi~edgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RulesEngineResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * /edge_applications/{edge_application_id}/rules_engine/{phase}/rules
     * @param {Number} edgeApplicationId 
     * @param {String} phase 
     * @param {Object} opts Optional parameters
     * @param {Number} [page] 
     * @param {Number} [pageSize] 
     * @param {String} [filter] 
     * @param {String} [orderBy] 
     * @param {String} [sort] 
     * @param {String} [accept] 
     * @param {module:api/EdgeApplicationsRulesEngineApi~edgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RulesEngineResponse}
     */
    edgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesGet(edgeApplicationId, phase, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'edgeApplicationId' is set
      if (edgeApplicationId === undefined || edgeApplicationId === null) {
        throw new Error("Missing the required parameter 'edgeApplicationId' when calling edgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesGet");
      }
      // verify the required parameter 'phase' is set
      if (phase === undefined || phase === null) {
        throw new Error("Missing the required parameter 'phase' when calling edgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesGet");
      }

      let pathParams = {
        'edge_application_id': edgeApplicationId,
        'phase': phase
      };
      let queryParams = {
        'page': opts['page'],
        'page_size': opts['pageSize'],
        'filter': opts['filter'],
        'order_by': opts['orderBy'],
        'sort': opts['sort']
      };
      let headerParams = {
        'Accept': opts['accept']
      };
      let formParams = {
      };

      let authNames = ['tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json; version=3'];
      let returnType = RulesEngineResponse;
      return this.apiClient.callApi(
        '/edge_applications/{edge_application_id}/rules_engine/{phase}/rules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the edgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesPost operation.
     * @callback module:api/EdgeApplicationsRulesEngineApi~edgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RulesEngineIdResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * /edge_applications/{edge_application_id}/rules_engine/{phase}/rules
     * Check below the list of behaviors that can be applied:  | Name                                | Behavior               | | ----------------------------------- | ---------------------- | | Add Request Cookie                  | add_request_cookie     | | Add Request Header                  | add_request_header     | | Add Response Cookie                 | set_cookie             | | Add Response Header                 | add_response_header    | | Bypass Cache                        | bypass_cache_phase     | | Capture Match Groups                | capture_match_groups   | | Deliver                             | deliver                | | Deny (403 Forbidden)                | deny                   | | Enable Gzip                         | enable_gzip            | | Filter Request Cookie               | filter_request_cookie  | | Filter Request Header               | filter_request_header  | | Filter Response Cookie              | filter_response_cookie | | Filter Response Header              | filter_response_header | | Finish Request Phase                | finish_request_phase   | | Forward Cookies                     | forward_cookies        | | Optimize Images                     | optimize_images        | | Redirect HTTP to HTTPS              | redirect_http_to_https | | Redirect To (301 Moved Permanently) | redirect_to_301        | | Redirect To (302 Found)             | redirect_to_302        | | Rewrite Request                     | rewrite_request        | | Run Function                        | run_function           | | Set Cache Policy                    | set_cache_policy       | | Set Origin                          | set_origin             |
     * @param {Number} edgeApplicationId 
     * @param {String} phase 
     * @param {Object} opts Optional parameters
     * @param {String} [accept] 
     * @param {String} [contentType] The type of coding used in the Body (application/json). <br>  Example: Content-Type: application/json
     * @param {module:model/CreateRulesEngineRequest} [createRulesEngineRequest] 
     * @param {module:api/EdgeApplicationsRulesEngineApi~edgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RulesEngineIdResponse}
     */
    edgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesPost(edgeApplicationId, phase, opts, callback) {
      opts = opts || {};
      let postBody = opts['createRulesEngineRequest'];
      // verify the required parameter 'edgeApplicationId' is set
      if (edgeApplicationId === undefined || edgeApplicationId === null) {
        throw new Error("Missing the required parameter 'edgeApplicationId' when calling edgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesPost");
      }
      // verify the required parameter 'phase' is set
      if (phase === undefined || phase === null) {
        throw new Error("Missing the required parameter 'phase' when calling edgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesPost");
      }

      let pathParams = {
        'edge_application_id': edgeApplicationId,
        'phase': phase
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': opts['accept'],
        'Content-Type': opts['contentType']
      };
      let formParams = {
      };

      let authNames = ['tokenAuth'];
      let contentTypes = ['application/json; version=3'];
      let accepts = ['application/json; version=3'];
      let returnType = RulesEngineIdResponse;
      return this.apiClient.callApi(
        '/edge_applications/{edge_application_id}/rules_engine/{phase}/rules', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the edgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdDelete operation.
     * @callback module:api/EdgeApplicationsRulesEngineApi~edgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * /edge_applications/{edge_application_id}/rules_engine/{phase}/rules
     * @param {Number} edgeApplicationId The id of the edge application you plan to delete. 
     * @param {String} phase 
     * @param {Number} ruleId The id of the rule you plan to delete. 
     * @param {Object} opts Optional parameters
     * @param {String} [accept] 
     * @param {module:api/EdgeApplicationsRulesEngineApi~edgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    edgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdDelete(edgeApplicationId, phase, ruleId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'edgeApplicationId' is set
      if (edgeApplicationId === undefined || edgeApplicationId === null) {
        throw new Error("Missing the required parameter 'edgeApplicationId' when calling edgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdDelete");
      }
      // verify the required parameter 'phase' is set
      if (phase === undefined || phase === null) {
        throw new Error("Missing the required parameter 'phase' when calling edgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdDelete");
      }
      // verify the required parameter 'ruleId' is set
      if (ruleId === undefined || ruleId === null) {
        throw new Error("Missing the required parameter 'ruleId' when calling edgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdDelete");
      }

      let pathParams = {
        'edge_application_id': edgeApplicationId,
        'phase': phase,
        'rule_id': ruleId
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': opts['accept']
      };
      let formParams = {
      };

      let authNames = ['tokenAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/edge_applications/{edge_application_id}/rules_engine/{phase}/rules/{rule_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the edgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdGet operation.
     * @callback module:api/EdgeApplicationsRulesEngineApi~edgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RulesEngineIdResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * /edge_applications/{edge_application_id}/rules_engine/{phase}/rules
     * @param {Number} edgeApplicationId The id of the edge application you want to get. 
     * @param {String} phase 
     * @param {Number} ruleId The id of the rule you plan to delete. 
     * @param {Object} opts Optional parameters
     * @param {String} [accept] 
     * @param {module:api/EdgeApplicationsRulesEngineApi~edgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RulesEngineIdResponse}
     */
    edgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdGet(edgeApplicationId, phase, ruleId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'edgeApplicationId' is set
      if (edgeApplicationId === undefined || edgeApplicationId === null) {
        throw new Error("Missing the required parameter 'edgeApplicationId' when calling edgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdGet");
      }
      // verify the required parameter 'phase' is set
      if (phase === undefined || phase === null) {
        throw new Error("Missing the required parameter 'phase' when calling edgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdGet");
      }
      // verify the required parameter 'ruleId' is set
      if (ruleId === undefined || ruleId === null) {
        throw new Error("Missing the required parameter 'ruleId' when calling edgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdGet");
      }

      let pathParams = {
        'edge_application_id': edgeApplicationId,
        'phase': phase,
        'rule_id': ruleId
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': opts['accept']
      };
      let formParams = {
      };

      let authNames = ['tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json; version=3'];
      let returnType = RulesEngineIdResponse;
      return this.apiClient.callApi(
        '/edge_applications/{edge_application_id}/rules_engine/{phase}/rules/{rule_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the edgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdPatch operation.
     * @callback module:api/EdgeApplicationsRulesEngineApi~edgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RulesEngineIdResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * /edge_applications/:edge_application_id:/rules_engine/:phase:/rules/:rule_id:
     * @param {Number} edgeApplicationId 
     * @param {String} phase 
     * @param {Number} ruleId 
     * @param {Object} opts Optional parameters
     * @param {String} [accept] 
     * @param {String} [contentType] The type of coding used in the Body (application/json). <br>  Example: Content-Type: application/json
     * @param {module:model/PatchRulesEngineRequest} [patchRulesEngineRequest] 
     * @param {module:api/EdgeApplicationsRulesEngineApi~edgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RulesEngineIdResponse}
     */
    edgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdPatch(edgeApplicationId, phase, ruleId, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchRulesEngineRequest'];
      // verify the required parameter 'edgeApplicationId' is set
      if (edgeApplicationId === undefined || edgeApplicationId === null) {
        throw new Error("Missing the required parameter 'edgeApplicationId' when calling edgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdPatch");
      }
      // verify the required parameter 'phase' is set
      if (phase === undefined || phase === null) {
        throw new Error("Missing the required parameter 'phase' when calling edgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdPatch");
      }
      // verify the required parameter 'ruleId' is set
      if (ruleId === undefined || ruleId === null) {
        throw new Error("Missing the required parameter 'ruleId' when calling edgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdPatch");
      }

      let pathParams = {
        'edge_application_id': edgeApplicationId,
        'phase': phase,
        'rule_id': ruleId
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': opts['accept'],
        'Content-Type': opts['contentType']
      };
      let formParams = {
      };

      let authNames = ['tokenAuth'];
      let contentTypes = ['application/json; version=3'];
      let accepts = ['application/json; version=3'];
      let returnType = RulesEngineIdResponse;
      return this.apiClient.callApi(
        '/edge_applications/{edge_application_id}/rules_engine/{phase}/rules/{rule_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the edgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdPut operation.
     * @callback module:api/EdgeApplicationsRulesEngineApi~edgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RulesEngineIdResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * /edge_applications/:edge_application_id:/rules_engine/:phase:/rules/:rule_id:
     * @param {Number} edgeApplicationId 
     * @param {String} phase 
     * @param {Number} ruleId 
     * @param {Object} opts Optional parameters
     * @param {String} [accept] 
     * @param {String} [contentType] The type of coding used in the Body (application/json). <br>  Example: Content-Type: application/json
     * @param {module:model/UpdateRulesEngineRequest} [updateRulesEngineRequest] 
     * @param {module:api/EdgeApplicationsRulesEngineApi~edgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RulesEngineIdResponse}
     */
    edgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdPut(edgeApplicationId, phase, ruleId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateRulesEngineRequest'];
      // verify the required parameter 'edgeApplicationId' is set
      if (edgeApplicationId === undefined || edgeApplicationId === null) {
        throw new Error("Missing the required parameter 'edgeApplicationId' when calling edgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdPut");
      }
      // verify the required parameter 'phase' is set
      if (phase === undefined || phase === null) {
        throw new Error("Missing the required parameter 'phase' when calling edgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdPut");
      }
      // verify the required parameter 'ruleId' is set
      if (ruleId === undefined || ruleId === null) {
        throw new Error("Missing the required parameter 'ruleId' when calling edgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdPut");
      }

      let pathParams = {
        'edge_application_id': edgeApplicationId,
        'phase': phase,
        'rule_id': ruleId
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': opts['accept'],
        'Content-Type': opts['contentType']
      };
      let formParams = {
      };

      let authNames = ['tokenAuth'];
      let contentTypes = ['application/json; version=3'];
      let accepts = ['application/json; version=3'];
      let returnType = RulesEngineIdResponse;
      return this.apiClient.callApi(
        '/edge_applications/{edge_application_id}/rules_engine/{phase}/rules/{rule_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
