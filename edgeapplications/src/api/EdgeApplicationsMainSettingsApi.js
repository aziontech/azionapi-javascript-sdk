/**
 * Edge Application API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApplicationPutRequest from '../model/ApplicationPutRequest';
import ApplicationPutResult from '../model/ApplicationPutResult';
import ApplicationUpdateRequest from '../model/ApplicationUpdateRequest';
import ApplicationUpdateResponse from '../model/ApplicationUpdateResponse';
import CreateApplicationRequest from '../model/CreateApplicationRequest';
import CreateApplicationResult from '../model/CreateApplicationResult';
import GetApplicationResponse from '../model/GetApplicationResponse';
import GetApplicationsResponse from '../model/GetApplicationsResponse';

/**
* EdgeApplicationsMainSettings service.
* @module api/EdgeApplicationsMainSettingsApi
* @version 2.0.0
*/
export default class EdgeApplicationsMainSettingsApi {

    /**
    * Constructs a new EdgeApplicationsMainSettingsApi. 
    * @alias module:api/EdgeApplicationsMainSettingsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the edgeApplicationsGet operation.
     * @callback module:api/EdgeApplicationsMainSettingsApi~edgeApplicationsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetApplicationsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * /edge_applications
     * @param {Object} opts Optional parameters
     * @param {Number} [page] 
     * @param {Number} [pageSize] 
     * @param {String} [filter] 
     * @param {String} [orderBy] 
     * @param {String} [sort] 
     * @param {String} [accept] 
     * @param {module:api/EdgeApplicationsMainSettingsApi~edgeApplicationsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetApplicationsResponse}
     */
    edgeApplicationsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'page_size': opts['pageSize'],
        'filter': opts['filter'],
        'order_by': opts['orderBy'],
        'sort': opts['sort']
      };
      let headerParams = {
        'Accept': opts['accept']
      };
      let formParams = {
      };

      let authNames = ['tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json; version=3'];
      let returnType = GetApplicationsResponse;
      return this.apiClient.callApi(
        '/edge_applications', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the edgeApplicationsIdDelete operation.
     * @callback module:api/EdgeApplicationsMainSettingsApi~edgeApplicationsIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * /edge_applications/:id
     * @param {String} id The id of the edge application that you plan to delete.
     * @param {Object} opts Optional parameters
     * @param {String} [accept] 
     * @param {module:api/EdgeApplicationsMainSettingsApi~edgeApplicationsIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    edgeApplicationsIdDelete(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling edgeApplicationsIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': opts['accept']
      };
      let formParams = {
      };

      let authNames = ['tokenAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/edge_applications/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the edgeApplicationsIdGet operation.
     * @callback module:api/EdgeApplicationsMainSettingsApi~edgeApplicationsIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetApplicationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * /edge_applications/:id
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} [accept] 
     * @param {module:api/EdgeApplicationsMainSettingsApi~edgeApplicationsIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetApplicationResponse}
     */
    edgeApplicationsIdGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling edgeApplicationsIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': opts['accept']
      };
      let formParams = {
      };

      let authNames = ['tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json; version=3'];
      let returnType = GetApplicationResponse;
      return this.apiClient.callApi(
        '/edge_applications/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the edgeApplicationsIdPatch operation.
     * @callback module:api/EdgeApplicationsMainSettingsApi~edgeApplicationsIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApplicationUpdateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * /edge_applications/:id
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} [accept] 
     * @param {String} [contentType] The type of coding used in the Body (application/json). <br>  Example: Content-Type: application/json
     * @param {module:model/ApplicationUpdateRequest} [applicationUpdateRequest] 
     * @param {module:api/EdgeApplicationsMainSettingsApi~edgeApplicationsIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApplicationUpdateResponse}
     */
    edgeApplicationsIdPatch(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['applicationUpdateRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling edgeApplicationsIdPatch");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': opts['accept'],
        'Content-Type': opts['contentType']
      };
      let formParams = {
      };

      let authNames = ['tokenAuth'];
      let contentTypes = ['application/json; version=3'];
      let accepts = ['application/json; version=3'];
      let returnType = ApplicationUpdateResponse;
      return this.apiClient.callApi(
        '/edge_applications/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the edgeApplicationsIdPut operation.
     * @callback module:api/EdgeApplicationsMainSettingsApi~edgeApplicationsIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApplicationPutResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * /edge_applications/:id
     * @param {String} id The Id of the edge application to be overwritten. 
     * @param {Object} opts Optional parameters
     * @param {String} [accept] 
     * @param {String} [contentType] The type of coding used in the Body (application/json). <br>  Example: Content-Type: application/json
     * @param {module:model/ApplicationPutRequest} [applicationPutRequest] 
     * @param {module:api/EdgeApplicationsMainSettingsApi~edgeApplicationsIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApplicationPutResult}
     */
    edgeApplicationsIdPut(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['applicationPutRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling edgeApplicationsIdPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': opts['accept'],
        'Content-Type': opts['contentType']
      };
      let formParams = {
      };

      let authNames = ['tokenAuth'];
      let contentTypes = ['application/json; version=3'];
      let accepts = ['application/json; version=3'];
      let returnType = ApplicationPutResult;
      return this.apiClient.callApi(
        '/edge_applications/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the edgeApplicationsPost operation.
     * @callback module:api/EdgeApplicationsMainSettingsApi~edgeApplicationsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateApplicationResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * /edge_applications
     * @param {Object} opts Optional parameters
     * @param {String} [accept] 
     * @param {String} [contentType] The type of coding used in the Body (application/json). <br>  Example: Content-Type: application/json
     * @param {module:model/CreateApplicationRequest} [createApplicationRequest] 
     * @param {module:api/EdgeApplicationsMainSettingsApi~edgeApplicationsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateApplicationResult}
     */
    edgeApplicationsPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['createApplicationRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': opts['accept'],
        'Content-Type': opts['contentType']
      };
      let formParams = {
      };

      let authNames = ['tokenAuth'];
      let contentTypes = ['application/json; version=3'];
      let accepts = ['application/json; version=3'];
      let returnType = CreateApplicationResult;
      return this.apiClient.callApi(
        '/edge_applications', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
