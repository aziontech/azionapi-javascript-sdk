/**
 * Edge Application API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApplicationCacheCreateRequest from '../model/ApplicationCacheCreateRequest';
import ApplicationCacheCreateResponse from '../model/ApplicationCacheCreateResponse';
import ApplicationCacheGetOneResponse from '../model/ApplicationCacheGetOneResponse';
import ApplicationCacheGetResponse from '../model/ApplicationCacheGetResponse';
import ApplicationCachePatchRequest from '../model/ApplicationCachePatchRequest';
import ApplicationCachePatchResponse from '../model/ApplicationCachePatchResponse';
import ApplicationCachePutRequest from '../model/ApplicationCachePutRequest';
import ApplicationCachePutResponse from '../model/ApplicationCachePutResponse';

/**
* EdgeApplicationsCacheSettings service.
* @module api/EdgeApplicationsCacheSettingsApi
* @version 2.0.0
*/
export default class EdgeApplicationsCacheSettingsApi {

    /**
    * Constructs a new EdgeApplicationsCacheSettingsApi. 
    * @alias module:api/EdgeApplicationsCacheSettingsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the edgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdDelete operation.
     * @callback module:api/EdgeApplicationsCacheSettingsApi~edgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * /edge_applications/:edge_application_id:/cache_settings/:cache_settings_id:
     * @param {Number} edgeApplicationId 
     * @param {Number} cacheSettingsId 
     * @param {Object} opts Optional parameters
     * @param {String} [accept] 
     * @param {String} [contentType] The type of coding used in the Body (application/json). <br>  Example: Content-Type: application/json
     * @param {module:api/EdgeApplicationsCacheSettingsApi~edgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    edgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdDelete(edgeApplicationId, cacheSettingsId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'edgeApplicationId' is set
      if (edgeApplicationId === undefined || edgeApplicationId === null) {
        throw new Error("Missing the required parameter 'edgeApplicationId' when calling edgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdDelete");
      }
      // verify the required parameter 'cacheSettingsId' is set
      if (cacheSettingsId === undefined || cacheSettingsId === null) {
        throw new Error("Missing the required parameter 'cacheSettingsId' when calling edgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdDelete");
      }

      let pathParams = {
        'edge_application_id': edgeApplicationId,
        'cache_settings_id': cacheSettingsId
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': opts['accept'],
        'Content-Type': opts['contentType']
      };
      let formParams = {
      };

      let authNames = ['tokenAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/edge_applications/{edge_application_id}/cache_settings/{cache_settings_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the edgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdGet operation.
     * @callback module:api/EdgeApplicationsCacheSettingsApi~edgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApplicationCacheGetOneResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * /edge_applications/:edge_application_id:/cache_settings/:cache_settings_id:
     * @param {Number} edgeApplicationId 
     * @param {Number} cacheSettingsId 
     * @param {Object} opts Optional parameters
     * @param {String} [accept] 
     * @param {module:api/EdgeApplicationsCacheSettingsApi~edgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApplicationCacheGetOneResponse}
     */
    edgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdGet(edgeApplicationId, cacheSettingsId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'edgeApplicationId' is set
      if (edgeApplicationId === undefined || edgeApplicationId === null) {
        throw new Error("Missing the required parameter 'edgeApplicationId' when calling edgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdGet");
      }
      // verify the required parameter 'cacheSettingsId' is set
      if (cacheSettingsId === undefined || cacheSettingsId === null) {
        throw new Error("Missing the required parameter 'cacheSettingsId' when calling edgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdGet");
      }

      let pathParams = {
        'edge_application_id': edgeApplicationId,
        'cache_settings_id': cacheSettingsId
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': opts['accept']
      };
      let formParams = {
      };

      let authNames = ['tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json; version=3'];
      let returnType = ApplicationCacheGetOneResponse;
      return this.apiClient.callApi(
        '/edge_applications/{edge_application_id}/cache_settings/{cache_settings_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the edgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPatch operation.
     * @callback module:api/EdgeApplicationsCacheSettingsApi~edgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApplicationCachePatchResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * /edge_applications/:edge_application_id:/cache_settings/:cache_settings_id:
     * @param {Number} edgeApplicationId 
     * @param {Number} cacheSettingsId 
     * @param {Object} opts Optional parameters
     * @param {String} [accept] 
     * @param {module:model/ApplicationCachePatchRequest} [applicationCachePatchRequest] 
     * @param {module:api/EdgeApplicationsCacheSettingsApi~edgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApplicationCachePatchResponse}
     */
    edgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPatch(edgeApplicationId, cacheSettingsId, opts, callback) {
      opts = opts || {};
      let postBody = opts['applicationCachePatchRequest'];
      // verify the required parameter 'edgeApplicationId' is set
      if (edgeApplicationId === undefined || edgeApplicationId === null) {
        throw new Error("Missing the required parameter 'edgeApplicationId' when calling edgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPatch");
      }
      // verify the required parameter 'cacheSettingsId' is set
      if (cacheSettingsId === undefined || cacheSettingsId === null) {
        throw new Error("Missing the required parameter 'cacheSettingsId' when calling edgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPatch");
      }

      let pathParams = {
        'edge_application_id': edgeApplicationId,
        'cache_settings_id': cacheSettingsId
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': opts['accept']
      };
      let formParams = {
      };

      let authNames = ['tokenAuth'];
      let contentTypes = ['application/json; version=3'];
      let accepts = ['application/json; version=3'];
      let returnType = ApplicationCachePatchResponse;
      return this.apiClient.callApi(
        '/edge_applications/{edge_application_id}/cache_settings/{cache_settings_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the edgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPut operation.
     * @callback module:api/EdgeApplicationsCacheSettingsApi~edgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApplicationCachePutResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * /edge_applications/:edge_application_id:/cache_settings/ca
     * @param {Number} edgeApplicationId 
     * @param {Number} cacheSettingsId 
     * @param {Object} opts Optional parameters
     * @param {String} [accept] 
     * @param {String} [contentType] The type of coding used in the Body (application/json). <br>  Example: Content-Type: application/json
     * @param {module:model/ApplicationCachePutRequest} [applicationCachePutRequest] 
     * @param {module:api/EdgeApplicationsCacheSettingsApi~edgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApplicationCachePutResponse}
     */
    edgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPut(edgeApplicationId, cacheSettingsId, opts, callback) {
      opts = opts || {};
      let postBody = opts['applicationCachePutRequest'];
      // verify the required parameter 'edgeApplicationId' is set
      if (edgeApplicationId === undefined || edgeApplicationId === null) {
        throw new Error("Missing the required parameter 'edgeApplicationId' when calling edgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPut");
      }
      // verify the required parameter 'cacheSettingsId' is set
      if (cacheSettingsId === undefined || cacheSettingsId === null) {
        throw new Error("Missing the required parameter 'cacheSettingsId' when calling edgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPut");
      }

      let pathParams = {
        'edge_application_id': edgeApplicationId,
        'cache_settings_id': cacheSettingsId
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': opts['accept'],
        'Content-Type': opts['contentType']
      };
      let formParams = {
      };

      let authNames = ['tokenAuth'];
      let contentTypes = ['application/json; version=3'];
      let accepts = ['application/json; version=3'];
      let returnType = ApplicationCachePutResponse;
      return this.apiClient.callApi(
        '/edge_applications/{edge_application_id}/cache_settings/{cache_settings_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the edgeApplicationsEdgeApplicationIdCacheSettingsGet operation.
     * @callback module:api/EdgeApplicationsCacheSettingsApi~edgeApplicationsEdgeApplicationIdCacheSettingsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApplicationCacheGetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * /edge_applications/{edge_application_id}/cache_settings
     * @param {Number} edgeApplicationId 
     * @param {Object} opts Optional parameters
     * @param {Number} [page] 
     * @param {Number} [pageSize] 
     * @param {String} [filter] 
     * @param {String} [orderBy] 
     * @param {String} [sort] 
     * @param {String} [accept] 
     * @param {module:api/EdgeApplicationsCacheSettingsApi~edgeApplicationsEdgeApplicationIdCacheSettingsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApplicationCacheGetResponse}
     */
    edgeApplicationsEdgeApplicationIdCacheSettingsGet(edgeApplicationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'edgeApplicationId' is set
      if (edgeApplicationId === undefined || edgeApplicationId === null) {
        throw new Error("Missing the required parameter 'edgeApplicationId' when calling edgeApplicationsEdgeApplicationIdCacheSettingsGet");
      }

      let pathParams = {
        'edge_application_id': edgeApplicationId
      };
      let queryParams = {
        'page': opts['page'],
        'page_size': opts['pageSize'],
        'filter': opts['filter'],
        'order_by': opts['orderBy'],
        'sort': opts['sort']
      };
      let headerParams = {
        'Accept': opts['accept']
      };
      let formParams = {
      };

      let authNames = ['tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json; version=3'];
      let returnType = ApplicationCacheGetResponse;
      return this.apiClient.callApi(
        '/edge_applications/{edge_application_id}/cache_settings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the edgeApplicationsEdgeApplicationIdCacheSettingsPost operation.
     * @callback module:api/EdgeApplicationsCacheSettingsApi~edgeApplicationsEdgeApplicationIdCacheSettingsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApplicationCacheCreateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * /edge_applications/:edge_application_id:/cache_settings
     * @param {Number} edgeApplicationId 
     * @param {Object} opts Optional parameters
     * @param {String} [accept] 
     * @param {String} [contentType] The type of coding used in the Body (application/json). <br>  Example: Content-Type: application/json
     * @param {module:model/ApplicationCacheCreateRequest} [applicationCacheCreateRequest] 
     * @param {module:api/EdgeApplicationsCacheSettingsApi~edgeApplicationsEdgeApplicationIdCacheSettingsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApplicationCacheCreateResponse}
     */
    edgeApplicationsEdgeApplicationIdCacheSettingsPost(edgeApplicationId, opts, callback) {
      opts = opts || {};
      let postBody = opts['applicationCacheCreateRequest'];
      // verify the required parameter 'edgeApplicationId' is set
      if (edgeApplicationId === undefined || edgeApplicationId === null) {
        throw new Error("Missing the required parameter 'edgeApplicationId' when calling edgeApplicationsEdgeApplicationIdCacheSettingsPost");
      }

      let pathParams = {
        'edge_application_id': edgeApplicationId
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': opts['accept'],
        'Content-Type': opts['contentType']
      };
      let formParams = {
      };

      let authNames = ['tokenAuth'];
      let contentTypes = ['application/json; version=3'];
      let accepts = ['application/json; version=3'];
      let returnType = ApplicationCacheCreateResponse;
      return this.apiClient.callApi(
        '/edge_applications/{edge_application_id}/cache_settings', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
