/**
 * Edge Application API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApplicationCreateInstanceRequest from '../model/ApplicationCreateInstanceRequest';
import ApplicationInstanceResults from '../model/ApplicationInstanceResults';
import ApplicationInstancesGetOneResponse from '../model/ApplicationInstancesGetOneResponse';
import ApplicationInstancesGetResponse from '../model/ApplicationInstancesGetResponse';
import ApplicationPutInstanceRequest from '../model/ApplicationPutInstanceRequest';
import ApplicationUpdateInstanceRequest from '../model/ApplicationUpdateInstanceRequest';

/**
* EdgeApplicationsEdgeFunctionsInstances service.
* @module api/EdgeApplicationsEdgeFunctionsInstancesApi
* @version 2.0.0
*/
export default class EdgeApplicationsEdgeFunctionsInstancesApi {

    /**
    * Constructs a new EdgeApplicationsEdgeFunctionsInstancesApi. 
    * @alias module:api/EdgeApplicationsEdgeFunctionsInstancesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the edgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdDelete operation.
     * @callback module:api/EdgeApplicationsEdgeFunctionsInstancesApi~edgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * /edge_applications/:edge_application_id:/functions_instances/:functions_instances_id:
     * @param {String} edgeApplicationId 
     * @param {String} functionsInstancesId 
     * @param {Object} opts Optional parameters
     * @param {String} [accept] 
     * @param {String} [contentType] The type of coding used in the Body (application/json). <br>  Example: Content-Type: application/json
     * @param {module:api/EdgeApplicationsEdgeFunctionsInstancesApi~edgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    edgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdDelete(edgeApplicationId, functionsInstancesId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'edgeApplicationId' is set
      if (edgeApplicationId === undefined || edgeApplicationId === null) {
        throw new Error("Missing the required parameter 'edgeApplicationId' when calling edgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdDelete");
      }
      // verify the required parameter 'functionsInstancesId' is set
      if (functionsInstancesId === undefined || functionsInstancesId === null) {
        throw new Error("Missing the required parameter 'functionsInstancesId' when calling edgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdDelete");
      }

      let pathParams = {
        'edge_application_id': edgeApplicationId,
        'functions_instances_id': functionsInstancesId
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': opts['accept'],
        'Content-Type': opts['contentType']
      };
      let formParams = {
      };

      let authNames = ['tokenAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/edge_applications/{edge_application_id}/functions_instances/{functions_instances_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the edgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdGet operation.
     * @callback module:api/EdgeApplicationsEdgeFunctionsInstancesApi~edgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApplicationInstancesGetOneResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * /edge_applications/:edge_application_id:/functions_instances/:functions_instances_id:
     * @param {Number} edgeApplicationId 
     * @param {Number} functionsInstancesId 
     * @param {Object} opts Optional parameters
     * @param {String} [accept] The id of the edge function instance you plan to query. 
     * @param {module:api/EdgeApplicationsEdgeFunctionsInstancesApi~edgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApplicationInstancesGetOneResponse}
     */
    edgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdGet(edgeApplicationId, functionsInstancesId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'edgeApplicationId' is set
      if (edgeApplicationId === undefined || edgeApplicationId === null) {
        throw new Error("Missing the required parameter 'edgeApplicationId' when calling edgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdGet");
      }
      // verify the required parameter 'functionsInstancesId' is set
      if (functionsInstancesId === undefined || functionsInstancesId === null) {
        throw new Error("Missing the required parameter 'functionsInstancesId' when calling edgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdGet");
      }

      let pathParams = {
        'edge_application_id': edgeApplicationId,
        'functions_instances_id': functionsInstancesId
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': opts['accept']
      };
      let formParams = {
      };

      let authNames = ['tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json; version=3'];
      let returnType = ApplicationInstancesGetOneResponse;
      return this.apiClient.callApi(
        '/edge_applications/{edge_application_id}/functions_instances/{functions_instances_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the edgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdPatch operation.
     * @callback module:api/EdgeApplicationsEdgeFunctionsInstancesApi~edgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApplicationInstanceResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * /edge_applications/:edge_application_id:/functions_instances/:functions_instances_id:
     * @param {String} edgeApplicationId The id of the edge application you plan to overwrite 
     * @param {String} functionsInstancesId The id of the edge function instance you plan to overwrite.
     * @param {Object} opts Optional parameters
     * @param {String} [accept] 
     * @param {String} [contentType] The type of coding used in the Body (application/json). <br>  Example: Content-Type: application/json
     * @param {module:model/ApplicationUpdateInstanceRequest} [applicationUpdateInstanceRequest] 
     * @param {module:api/EdgeApplicationsEdgeFunctionsInstancesApi~edgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApplicationInstanceResults}
     */
    edgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdPatch(edgeApplicationId, functionsInstancesId, opts, callback) {
      opts = opts || {};
      let postBody = opts['applicationUpdateInstanceRequest'];
      // verify the required parameter 'edgeApplicationId' is set
      if (edgeApplicationId === undefined || edgeApplicationId === null) {
        throw new Error("Missing the required parameter 'edgeApplicationId' when calling edgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdPatch");
      }
      // verify the required parameter 'functionsInstancesId' is set
      if (functionsInstancesId === undefined || functionsInstancesId === null) {
        throw new Error("Missing the required parameter 'functionsInstancesId' when calling edgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdPatch");
      }

      let pathParams = {
        'edge_application_id': edgeApplicationId,
        'functions_instances_id': functionsInstancesId
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': opts['accept'],
        'Content-Type': opts['contentType']
      };
      let formParams = {
      };

      let authNames = ['tokenAuth'];
      let contentTypes = ['application/json; version=3'];
      let accepts = ['application/json; version=3'];
      let returnType = ApplicationInstanceResults;
      return this.apiClient.callApi(
        '/edge_applications/{edge_application_id}/functions_instances/{functions_instances_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the edgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdPut operation.
     * @callback module:api/EdgeApplicationsEdgeFunctionsInstancesApi~edgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApplicationInstanceResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * /edge_applications/:edge_application_id:/functions_instances/:functions_instances_id:
     * @param {String} edgeApplicationId The id of the edge application you plan to overwrite 
     * @param {String} functionsInstancesId The id of the edge function instance you plan to overwrite.
     * @param {Object} opts Optional parameters
     * @param {String} [accept] 
     * @param {String} [contentType] The type of coding used in the Body (application/json). <br>  Example: Content-Type: application/json
     * @param {module:model/ApplicationPutInstanceRequest} [applicationPutInstanceRequest] 
     * @param {module:api/EdgeApplicationsEdgeFunctionsInstancesApi~edgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApplicationInstanceResults}
     */
    edgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdPut(edgeApplicationId, functionsInstancesId, opts, callback) {
      opts = opts || {};
      let postBody = opts['applicationPutInstanceRequest'];
      // verify the required parameter 'edgeApplicationId' is set
      if (edgeApplicationId === undefined || edgeApplicationId === null) {
        throw new Error("Missing the required parameter 'edgeApplicationId' when calling edgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdPut");
      }
      // verify the required parameter 'functionsInstancesId' is set
      if (functionsInstancesId === undefined || functionsInstancesId === null) {
        throw new Error("Missing the required parameter 'functionsInstancesId' when calling edgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdPut");
      }

      let pathParams = {
        'edge_application_id': edgeApplicationId,
        'functions_instances_id': functionsInstancesId
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': opts['accept'],
        'Content-Type': opts['contentType']
      };
      let formParams = {
      };

      let authNames = ['tokenAuth'];
      let contentTypes = ['application/json; version=3'];
      let accepts = ['application/json; version=3'];
      let returnType = ApplicationInstanceResults;
      return this.apiClient.callApi(
        '/edge_applications/{edge_application_id}/functions_instances/{functions_instances_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the edgeApplicationsEdgeApplicationIdFunctionsInstancesGet operation.
     * @callback module:api/EdgeApplicationsEdgeFunctionsInstancesApi~edgeApplicationsEdgeApplicationIdFunctionsInstancesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApplicationInstancesGetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * /edge_applications/:edge_application_id:/functions_instances
     * @param {Number} edgeApplicationId 
     * @param {Object} opts Optional parameters
     * @param {Number} [page] 
     * @param {Number} [pageSize] 
     * @param {String} [filter] 
     * @param {String} [orderBy] 
     * @param {String} [sort] 
     * @param {String} [accept] 
     * @param {module:api/EdgeApplicationsEdgeFunctionsInstancesApi~edgeApplicationsEdgeApplicationIdFunctionsInstancesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApplicationInstancesGetResponse}
     */
    edgeApplicationsEdgeApplicationIdFunctionsInstancesGet(edgeApplicationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'edgeApplicationId' is set
      if (edgeApplicationId === undefined || edgeApplicationId === null) {
        throw new Error("Missing the required parameter 'edgeApplicationId' when calling edgeApplicationsEdgeApplicationIdFunctionsInstancesGet");
      }

      let pathParams = {
        'edge_application_id': edgeApplicationId
      };
      let queryParams = {
        'page': opts['page'],
        'page_size': opts['pageSize'],
        'filter': opts['filter'],
        'order_by': opts['orderBy'],
        'sort': opts['sort']
      };
      let headerParams = {
        'Accept': opts['accept']
      };
      let formParams = {
      };

      let authNames = ['tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json; version=3'];
      let returnType = ApplicationInstancesGetResponse;
      return this.apiClient.callApi(
        '/edge_applications/{edge_application_id}/functions_instances', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the edgeApplicationsEdgeApplicationIdFunctionsInstancesPost operation.
     * @callback module:api/EdgeApplicationsEdgeFunctionsInstancesApi~edgeApplicationsEdgeApplicationIdFunctionsInstancesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApplicationInstanceResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * edge_application/:edge_application_id:/functions_instances
     * @param {Number} edgeApplicationId 
     * @param {Object} opts Optional parameters
     * @param {String} [accept] 
     * @param {String} [contentType] The type of coding used in the Body (application/json). <br>  Example: Content-Type: application/json
     * @param {module:model/ApplicationCreateInstanceRequest} [applicationCreateInstanceRequest] 
     * @param {module:api/EdgeApplicationsEdgeFunctionsInstancesApi~edgeApplicationsEdgeApplicationIdFunctionsInstancesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApplicationInstanceResults}
     */
    edgeApplicationsEdgeApplicationIdFunctionsInstancesPost(edgeApplicationId, opts, callback) {
      opts = opts || {};
      let postBody = opts['applicationCreateInstanceRequest'];
      // verify the required parameter 'edgeApplicationId' is set
      if (edgeApplicationId === undefined || edgeApplicationId === null) {
        throw new Error("Missing the required parameter 'edgeApplicationId' when calling edgeApplicationsEdgeApplicationIdFunctionsInstancesPost");
      }

      let pathParams = {
        'edge_application_id': edgeApplicationId
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': opts['accept'],
        'Content-Type': opts['contentType']
      };
      let formParams = {
      };

      let authNames = ['tokenAuth'];
      let contentTypes = ['application/json; version=3'];
      let accepts = ['application/json; version=3'];
      let returnType = ApplicationInstanceResults;
      return this.apiClient.callApi(
        '/edge_applications/{edge_application_id}/functions_instances', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
