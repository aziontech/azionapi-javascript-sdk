/**
 * Data Streaming - OpenAPI
 * The Data Streaming API allows you to manage your existing data streamings and templates. Data Streaming allows you to feed your stream processing, SIEM, and big data platforms with the event logs from your applications on Azion in real time. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import TemplateResultById from '../model/TemplateResultById';
import TemplateResults from '../model/TemplateResults';

/**
* DataStreamingTemplates service.
* @module api/DataStreamingTemplatesApi
* @version 1.0.0
*/
export default class DataStreamingTemplatesApi {

    /**
    * Constructs a new DataStreamingTemplatesApi. 
    * @alias module:api/DataStreamingTemplatesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getDataStramingTemplateById operation.
     * @callback module:api/DataStreamingTemplatesApi~getDataStramingTemplateByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TemplateResultById} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an global Template info by template ID
     * Use the GET method and add the data streaming's ID to the URI of the request to get more data on a specific data streaming global template.
     * @param {Number} templateId 
     * @param {module:api/DataStreamingTemplatesApi~getDataStramingTemplateByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TemplateResultById}
     */
    getDataStramingTemplateById(templateId, callback) {
      let postBody = null;
      // verify the required parameter 'templateId' is set
      if (templateId === undefined || templateId === null) {
        throw new Error("Missing the required parameter 'templateId' when calling getDataStramingTemplateById");
      }

      let pathParams = {
        'template_id': templateId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TemplateResultById;
      return this.apiClient.callApi(
        '/data_streaming/templates/{template_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listDataStreamingTemplates operation.
     * @callback module:api/DataStreamingTemplatesApi~listDataStreamingTemplatesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TemplateResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all global Templates that can be used on Data Streaming operations
     * Use the GET method to list all global templates that can be used on Data Streaming operations.  **Note:** Customized templates won't be listed. 
     * @param {module:api/DataStreamingTemplatesApi~listDataStreamingTemplatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TemplateResults}
     */
    listDataStreamingTemplates(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TemplateResults;
      return this.apiClient.callApi(
        '/data_streaming/templates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
