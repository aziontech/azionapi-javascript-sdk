/**
 * Data Streaming - OpenAPI
 * The Data Streaming API allows you to manage your existing data streamings and templates. Data Streaming allows you to feed your stream processing, SIEM, and big data platforms with the event logs from your applications on Azion in real time. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CustomDataStreamingPostBody from './CustomDataStreamingPostBody';
import DataStreamingEndpointTypeStandard from './DataStreamingEndpointTypeStandard';
import DataStreamingPostBody from './DataStreamingPostBody';
import StandardDataStreamingPostBody from './StandardDataStreamingPostBody';

/**
 * The CreateNewDataStreamingRequest model module.
 * @module model/CreateNewDataStreamingRequest
 * @version 1.0.0
 */
class CreateNewDataStreamingRequest {
    /**
     * Constructs a new <code>CreateNewDataStreamingRequest</code>.
     * @alias module:model/CreateNewDataStreamingRequest
     * @param {(module:model/CustomDataStreamingPostBody|module:model/DataStreamingPostBody|module:model/StandardDataStreamingPostBody)} instance The actual instance to initialize CreateNewDataStreamingRequest.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (typeof instance === "DataStreamingPostBody") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                DataStreamingPostBody.validateJSON(instance); // throw an exception if no match
                // create DataStreamingPostBody from JS object
                this.actualInstance = DataStreamingPostBody.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into DataStreamingPostBody
            errorMessages.push("Failed to construct DataStreamingPostBody: " + err)
        }

        try {
            if (typeof instance === "StandardDataStreamingPostBody") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                StandardDataStreamingPostBody.validateJSON(instance); // throw an exception if no match
                // create StandardDataStreamingPostBody from JS object
                this.actualInstance = StandardDataStreamingPostBody.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into StandardDataStreamingPostBody
            errorMessages.push("Failed to construct StandardDataStreamingPostBody: " + err)
        }

        try {
            if (typeof instance === "CustomDataStreamingPostBody") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                CustomDataStreamingPostBody.validateJSON(instance); // throw an exception if no match
                // create CustomDataStreamingPostBody from JS object
                this.actualInstance = CustomDataStreamingPostBody.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into CustomDataStreamingPostBody
            errorMessages.push("Failed to construct CustomDataStreamingPostBody: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `CreateNewDataStreamingRequest` with oneOf schemas CustomDataStreamingPostBody, DataStreamingPostBody, StandardDataStreamingPostBody. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `CreateNewDataStreamingRequest` with oneOf schemas CustomDataStreamingPostBody, DataStreamingPostBody, StandardDataStreamingPostBody. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>CreateNewDataStreamingRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateNewDataStreamingRequest} obj Optional instance to populate.
     * @return {module:model/CreateNewDataStreamingRequest} The populated <code>CreateNewDataStreamingRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        return new CreateNewDataStreamingRequest(data);
    }

    /**
     * Gets the actual instance, which can be <code>CustomDataStreamingPostBody</code>, <code>DataStreamingPostBody</code>, <code>StandardDataStreamingPostBody</code>.
     * @return {(module:model/CustomDataStreamingPostBody|module:model/DataStreamingPostBody|module:model/StandardDataStreamingPostBody)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>CustomDataStreamingPostBody</code>, <code>DataStreamingPostBody</code>, <code>StandardDataStreamingPostBody</code>.
     * @param {(module:model/CustomDataStreamingPostBody|module:model/DataStreamingPostBody|module:model/StandardDataStreamingPostBody)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = CreateNewDataStreamingRequest.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of CreateNewDataStreamingRequest from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/CreateNewDataStreamingRequest} An instance of CreateNewDataStreamingRequest.
     */
    static fromJSON = function(json_string){
        return CreateNewDataStreamingRequest.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * @member {String} name
 */
CreateNewDataStreamingRequest.prototype['name'] = undefined;

/**
 * Options:  * `2` - Edge Applications Event Collector  * `4` - WAF Event Collector  * `86` - Edge Functions Event Collector  * `184` - Edge Applications + WAF Event Collector  * `251` - Activity History Collector 
 * @member {module:model/CreateNewDataStreamingRequest.TemplateIdEnum} template_id
 */
CreateNewDataStreamingRequest.prototype['template_id'] = undefined;

/**
 * Options:  * `http` - Edge Applications (default)  * `waf` - WAF Events  * `cells_console` - Edge Functions  * `rtm_activity` - Activity History   
 * @member {module:model/CreateNewDataStreamingRequest.DataSourceEnum} data_source
 */
CreateNewDataStreamingRequest.prototype['data_source'] = undefined;

/**
 * @member {Boolean} active
 * @default true
 */
CreateNewDataStreamingRequest.prototype['active'] = true;

/**
 * @member {module:model/DataStreamingEndpointTypeStandard} endpoint
 */
CreateNewDataStreamingRequest.prototype['endpoint'] = undefined;

/**
 * Note:  * Field not used with the rtm_activity data source. 
 * @member {Array.<Number>} domains_ids
 */
CreateNewDataStreamingRequest.prototype['domains_ids'] = undefined;

/**
 * Note:  * Field not used with the rtm_activity data source. 
 * @member {Boolean} all_domains
 * @default false
 */
CreateNewDataStreamingRequest.prototype['all_domains'] = false;

/**
 * Note:  * `Range` - From 0 to 100.  * `To use:` [Contact the sales team](https://www.azion.com/en/contact-sales/) to activate this feature in your account. 
 * @member {Number} sampling_percentage
 */
CreateNewDataStreamingRequest.prototype['sampling_percentage'] = undefined;

/**
 * Note:  * Add all variables and values that will be used to stream according to the data source you choose to use.    * All data streaming [variables can be found on the reference documentation](https://www.azion.com/en/documentation/products/data-streaming/#selecting-data-sources).   
 * @member {String} template_model
 */
CreateNewDataStreamingRequest.prototype['template_model'] = undefined;


CreateNewDataStreamingRequest.OneOf = ["CustomDataStreamingPostBody", "DataStreamingPostBody", "StandardDataStreamingPostBody"];

export default CreateNewDataStreamingRequest;

