/**
 * Data Streaming - OpenAPI
 * The Data Streaming API allows you to manage your existing data streamings and templates. Data Streaming allows you to feed your stream processing, SIEM, and big data platforms with the event logs from your applications on Azion in real time. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DataStreamingOpenApi);
  }
}(this, function(expect, DataStreamingOpenApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new DataStreamingOpenApi.DataStreamingApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DataStreamingApi', function() {
    describe('createNewDataStreaming', function() {
      it('should call createNewDataStreaming successfully', function(done) {
        //uncomment below and update the code to test createNewDataStreaming
        //instance.createNewDataStreaming(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteDataStreamingById', function() {
      it('should call deleteDataStreamingById successfully', function(done) {
        //uncomment below and update the code to test deleteDataStreamingById
        //instance.deleteDataStreamingById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('editDataStreamingById', function() {
      it('should call editDataStreamingById successfully', function(done) {
        //uncomment below and update the code to test editDataStreamingById
        //instance.editDataStreamingById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listDataStreamingById', function() {
      it('should call listDataStreamingById successfully', function(done) {
        //uncomment below and update the code to test listDataStreamingById
        //instance.listDataStreamingById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listDataStreamings', function() {
      it('should call listDataStreamings successfully', function(done) {
        //uncomment below and update the code to test listDataStreamings
        //instance.listDataStreamings(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('overwriteDataStreamingById', function() {
      it('should call overwriteDataStreamingById successfully', function(done) {
        //uncomment below and update the code to test overwriteDataStreamingById
        //instance.overwriteDataStreamingById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
