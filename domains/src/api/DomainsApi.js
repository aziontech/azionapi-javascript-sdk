/**
 * Domain API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateDomainRequest from '../model/CreateDomainRequest';
import DomainResponseWithResult from '../model/DomainResponseWithResult';
import DomainResponseWithResults from '../model/DomainResponseWithResults';
import PutDomainRequest from '../model/PutDomainRequest';
import UpdateDomainRequest from '../model/UpdateDomainRequest';

/**
* Domains service.
* @module api/DomainsApi
* @version 2.0.0
*/
export default class DomainsApi {

    /**
    * Constructs a new DomainsApi. 
    * @alias module:api/DomainsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createDomain operation.
     * @callback module:api/DomainsApi~createDomainCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DomainResponseWithResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * /domains
     * It enables you to include a new domain into an account.
     * @param {Object} opts Optional parameters
     * @param {String} [accept] 
     * @param {String} [contentType] 
     * @param {module:model/CreateDomainRequest} [createDomainRequest] 
     * @param {module:api/DomainsApi~createDomainCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DomainResponseWithResult}
     */
    createDomain(opts, callback) {
      opts = opts || {};
      let postBody = opts['createDomainRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': opts['accept'],
        'Content-Type': opts['contentType']
      };
      let formParams = {
      };

      let authNames = ['tokenAuth'];
      let contentTypes = ['application/json; version=3'];
      let accepts = ['application/json; version=3'];
      let returnType = DomainResponseWithResult;
      return this.apiClient.callApi(
        '/domains', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the delDomain operation.
     * @callback module:api/DomainsApi~delDomainCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * /domains/:id
     * It enables you to delete a domain.
     * @param {String} id The id of the domain to be deleted. 
     * @param {Object} opts Optional parameters
     * @param {String} [accept] 
     * @param {module:api/DomainsApi~delDomainCallback} callback The callback function, accepting three arguments: error, data, response
     */
    delDomain(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling delDomain");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': opts['accept']
      };
      let formParams = {
      };

      let authNames = ['tokenAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/domains/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDomain operation.
     * @callback module:api/DomainsApi~getDomainCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DomainResponseWithResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * /domains/:id
     * It returns details of a domain.
     * @param {String} id The id of the domain to be consulted. 
     * @param {Object} opts Optional parameters
     * @param {String} [accept] 
     * @param {module:api/DomainsApi~getDomainCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DomainResponseWithResult}
     */
    getDomain(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getDomain");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': opts['accept']
      };
      let formParams = {
      };

      let authNames = ['tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json; version=3'];
      let returnType = DomainResponseWithResult;
      return this.apiClient.callApi(
        '/domains/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDomains operation.
     * @callback module:api/DomainsApi~getDomainsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DomainResponseWithResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * /domains
     * It returns the list of domains of an account.
     * @param {Object} opts Optional parameters
     * @param {Number} [page] 
     * @param {Number} [pageSize] 
     * @param {String} [sort] 
     * @param {String} [orderBy] 
     * @param {String} [accept] 
     * @param {module:api/DomainsApi~getDomainsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DomainResponseWithResults}
     */
    getDomains(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'page_size': opts['pageSize'],
        'sort': opts['sort'],
        'order_by': opts['orderBy']
      };
      let headerParams = {
        'Accept': opts['accept']
      };
      let formParams = {
      };

      let authNames = ['tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json; version=3'];
      let returnType = DomainResponseWithResults;
      return this.apiClient.callApi(
        '/domains', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putDomain operation.
     * @callback module:api/DomainsApi~putDomainCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DomainResponseWithResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * /domains:/:id
     * It overwrites all fields of a domain, while preserving the id. Optional fields not filled in will be replaced by the default values.  To update only some fields in a domain, consider using the PATCH method instead of PUT.
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} [accept] 
     * @param {String} [contentType] 
     * @param {module:model/PutDomainRequest} [putDomainRequest] 
     * @param {module:api/DomainsApi~putDomainCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DomainResponseWithResult}
     */
    putDomain(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['putDomainRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putDomain");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': opts['accept'],
        'Content-Type': opts['contentType']
      };
      let formParams = {
      };

      let authNames = ['tokenAuth'];
      let contentTypes = ['application/json; version=3'];
      let accepts = ['application/json; version=3'];
      let returnType = DomainResponseWithResult;
      return this.apiClient.callApi(
        '/domains/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDomain operation.
     * @callback module:api/DomainsApi~updateDomainCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DomainResponseWithResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * /domains/:id
     * It updates one or more fields in a Domain, preserving the value of the fields not informed.
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} [accept] 
     * @param {String} [contentType] 
     * @param {module:model/UpdateDomainRequest} [updateDomainRequest] 
     * @param {module:api/DomainsApi~updateDomainCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DomainResponseWithResult}
     */
    updateDomain(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateDomainRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateDomain");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': opts['accept'],
        'Content-Type': opts['contentType']
      };
      let formParams = {
      };

      let authNames = ['tokenAuth'];
      let contentTypes = ['application/json; version=3'];
      let accepts = ['application/json; version=3'];
      let returnType = DomainResponseWithResult;
      return this.apiClient.callApi(
        '/domains/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
