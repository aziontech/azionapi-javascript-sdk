/**
 * Domain API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DomainResults model module.
 * @module model/DomainResults
 * @version 2.0.0
 */
class DomainResults {
    /**
     * Constructs a new <code>DomainResults</code>.
     * @alias module:model/DomainResults
     * @param id {Number} 
     * @param name {String} 
     */
    constructor(id, name) { 
        
        DomainResults.initialize(this, id, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, name) { 
        obj['id'] = id;
        obj['name'] = name;
    }

    /**
     * Constructs a <code>DomainResults</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DomainResults} obj Optional instance to populate.
     * @return {module:model/DomainResults} The populated <code>DomainResults</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DomainResults();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('cnames')) {
                obj['cnames'] = ApiClient.convertToType(data['cnames'], ['String']);
            }
            if (data.hasOwnProperty('cname_access_only')) {
                obj['cname_access_only'] = ApiClient.convertToType(data['cname_access_only'], 'Boolean');
            }
            if (data.hasOwnProperty('is_active')) {
                obj['is_active'] = ApiClient.convertToType(data['is_active'], 'Boolean');
            }
            if (data.hasOwnProperty('edge_application_id')) {
                obj['edge_application_id'] = ApiClient.convertToType(data['edge_application_id'], 'Number');
            }
            if (data.hasOwnProperty('digital_certificate_id')) {
                obj['digital_certificate_id'] = ApiClient.convertToType(data['digital_certificate_id'], 'Number');
            }
            if (data.hasOwnProperty('domain_name')) {
                obj['domain_name'] = ApiClient.convertToType(data['domain_name'], 'String');
            }
            if (data.hasOwnProperty('environment')) {
                obj['environment'] = ApiClient.convertToType(data['environment'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DomainResults</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DomainResults</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DomainResults.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['cnames'])) {
            throw new Error("Expected the field `cnames` to be an array in the JSON data but got " + data['cnames']);
        }
        // ensure the json data is a string
        if (data['domain_name'] && !(typeof data['domain_name'] === 'string' || data['domain_name'] instanceof String)) {
            throw new Error("Expected the field `domain_name` to be a primitive type in the JSON string but got " + data['domain_name']);
        }
        // ensure the json data is a string
        if (data['environment'] && !(typeof data['environment'] === 'string' || data['environment'] instanceof String)) {
            throw new Error("Expected the field `environment` to be a primitive type in the JSON string but got " + data['environment']);
        }

        return true;
    }


}

DomainResults.RequiredProperties = ["id", "name"];

/**
 * @member {Number} id
 */
DomainResults.prototype['id'] = undefined;

/**
 * @member {String} name
 */
DomainResults.prototype['name'] = undefined;

/**
 * @member {Array.<String>} cnames
 */
DomainResults.prototype['cnames'] = undefined;

/**
 * @member {Boolean} cname_access_only
 */
DomainResults.prototype['cname_access_only'] = undefined;

/**
 * @member {Boolean} is_active
 */
DomainResults.prototype['is_active'] = undefined;

/**
 * @member {Number} edge_application_id
 */
DomainResults.prototype['edge_application_id'] = undefined;

/**
 * @member {Number} digital_certificate_id
 */
DomainResults.prototype['digital_certificate_id'] = undefined;

/**
 * @member {String} domain_name
 */
DomainResults.prototype['domain_name'] = undefined;

/**
 * @member {String} environment
 */
DomainResults.prototype['environment'] = undefined;






export default DomainResults;

