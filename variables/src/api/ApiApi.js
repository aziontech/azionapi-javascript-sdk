/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Variable from '../model/Variable';
import VariableCreate from '../model/VariableCreate';
import VariableGet from '../model/VariableGet';

/**
* Api service.
* @module api/ApiApi
* @version 0.0.0
*/
export default class ApiApi {

    /**
    * Constructs a new ApiApi. 
    * @alias module:api/ApiApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiSchemaRetrieve operation.
     * @callback module:api/ApiApi~apiSchemaRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: Object}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * OpenApi3 schema for this API. Format can be selected via content negotiation.  - YAML: application/vnd.oai.openapi - JSON: application/vnd.oai.openapi+json
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [format] 
     * @param {module:model/String} [lang] 
     * @param {module:api/ApiApi~apiSchemaRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: Object}>}
     */
    apiSchemaRetrieve(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'format': opts['format'],
        'lang': opts['lang']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/vnd.oai.openapi', 'application/yaml', 'application/vnd.oai.openapi+json', 'application/json'];
      let returnType = {'String': Object};
      return this.apiClient.callApi(
        '/api/schema', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiVariablesCreate operation.
     * @callback module:api/ApiApi~apiVariablesCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VariableGet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new Variable. <br><ul><li>If the attribute \"secret\" is informed with value \"true\" in request payload the Variable value will be secret and no longer viewable after creation.</li><li>If the attribute \"secret\" is not informed the Variable value will be considered as not secret by default.</li></ul>
     * @param {module:model/VariableCreate} variableCreate 
     * @param {module:api/ApiApi~apiVariablesCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VariableGet}
     */
    apiVariablesCreate(variableCreate, callback) {
      let postBody = variableCreate;
      // verify the required parameter 'variableCreate' is set
      if (variableCreate === undefined || variableCreate === null) {
        throw new Error("Missing the required parameter 'variableCreate' when calling apiVariablesCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['tokenAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = VariableGet;
      return this.apiClient.callApi(
        '/api/variables', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiVariablesDestroy operation.
     * @callback module:api/ApiApi~apiVariablesDestroyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Variable by it's UUID
     * @param {String} uuid 
     * @param {module:api/ApiApi~apiVariablesDestroyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiVariablesDestroy(uuid, callback) {
      let postBody = null;
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling apiVariablesDestroy");
      }

      let pathParams = {
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['tokenAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/variables/{uuid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiVariablesList operation.
     * @callback module:api/ApiApi~apiVariablesListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Variable>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all user's Variables.
     * @param {module:api/ApiApi~apiVariablesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Variable>}
     */
    apiVariablesList(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Variable];
      return this.apiClient.callApi(
        '/api/variables', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiVariablesRetrieve operation.
     * @callback module:api/ApiApi~apiVariablesRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Variable} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve all data for a Variable by it's UUID
     * @param {String} uuid 
     * @param {module:api/ApiApi~apiVariablesRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Variable}
     */
    apiVariablesRetrieve(uuid, callback) {
      let postBody = null;
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling apiVariablesRetrieve");
      }

      let pathParams = {
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Variable;
      return this.apiClient.callApi(
        '/api/variables/{uuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiVariablesUpdate operation.
     * @callback module:api/ApiApi~apiVariablesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VariableGet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update variable attributes by it's UUID. Keep the Variable UUID but overwrite all editable attributes.
     * @param {String} uuid 
     * @param {module:model/VariableCreate} variableCreate 
     * @param {module:api/ApiApi~apiVariablesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VariableGet}
     */
    apiVariablesUpdate(uuid, variableCreate, callback) {
      let postBody = variableCreate;
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling apiVariablesUpdate");
      }
      // verify the required parameter 'variableCreate' is set
      if (variableCreate === undefined || variableCreate === null) {
        throw new Error("Missing the required parameter 'variableCreate' when calling apiVariablesUpdate");
      }

      let pathParams = {
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['tokenAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = VariableGet;
      return this.apiClient.callApi(
        '/api/variables/{uuid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
