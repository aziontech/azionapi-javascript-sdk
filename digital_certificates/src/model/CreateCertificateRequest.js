/**
 * Digital Certificates API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CreateCertificateRequest model module.
 * @module model/CreateCertificateRequest
 * @version 2.0.0
 */
class CreateCertificateRequest {
    /**
     * Constructs a new <code>CreateCertificateRequest</code>.
     * @alias module:model/CreateCertificateRequest
     * @param name {String} 
     * @param certificate {String} 
     * @param privateKey {String} 
     */
    constructor(name, certificate, privateKey) { 
        
        CreateCertificateRequest.initialize(this, name, certificate, privateKey);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, certificate, privateKey) { 
        obj['name'] = name;
        obj['certificate'] = certificate;
        obj['private_key'] = privateKey;
    }

    /**
     * Constructs a <code>CreateCertificateRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateCertificateRequest} obj Optional instance to populate.
     * @return {module:model/CreateCertificateRequest} The populated <code>CreateCertificateRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateCertificateRequest();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('certificate')) {
                obj['certificate'] = ApiClient.convertToType(data['certificate'], 'String');
            }
            if (data.hasOwnProperty('private_key')) {
                obj['private_key'] = ApiClient.convertToType(data['private_key'], 'String');
            }
            if (data.hasOwnProperty('certificate_type')) {
                obj['certificate_type'] = ApiClient.convertToType(data['certificate_type'], 'String');
            }
            if (data.hasOwnProperty('managed')) {
                obj['managed'] = ApiClient.convertToType(data['managed'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateCertificateRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateCertificateRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateCertificateRequest.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['certificate'] && !(typeof data['certificate'] === 'string' || data['certificate'] instanceof String)) {
            throw new Error("Expected the field `certificate` to be a primitive type in the JSON string but got " + data['certificate']);
        }
        // ensure the json data is a string
        if (data['private_key'] && !(typeof data['private_key'] === 'string' || data['private_key'] instanceof String)) {
            throw new Error("Expected the field `private_key` to be a primitive type in the JSON string but got " + data['private_key']);
        }
        // ensure the json data is a string
        if (data['certificate_type'] && !(typeof data['certificate_type'] === 'string' || data['certificate_type'] instanceof String)) {
            throw new Error("Expected the field `certificate_type` to be a primitive type in the JSON string but got " + data['certificate_type']);
        }

        return true;
    }


}

CreateCertificateRequest.RequiredProperties = ["name", "certificate", "private_key"];

/**
 * @member {String} name
 */
CreateCertificateRequest.prototype['name'] = undefined;

/**
 * @member {String} certificate
 */
CreateCertificateRequest.prototype['certificate'] = undefined;

/**
 * @member {String} private_key
 */
CreateCertificateRequest.prototype['private_key'] = undefined;

/**
 * @member {module:model/CreateCertificateRequest.CertificateTypeEnum} certificate_type
 */
CreateCertificateRequest.prototype['certificate_type'] = undefined;

/**
 * @member {Boolean} managed
 */
CreateCertificateRequest.prototype['managed'] = undefined;





/**
 * Allowed values for the <code>certificate_type</code> property.
 * @enum {String}
 * @readonly
 */
CreateCertificateRequest['CertificateTypeEnum'] = {

    /**
     * value: "edge_certificate"
     * @const
     */
    "edge_certificate": "edge_certificate",

    /**
     * value: "trusted_ca_certificate"
     * @const
     */
    "trusted_ca_certificate": "trusted_ca_certificate"
};



export default CreateCertificateRequest;

